{"version":3,"sources":["webpack://wave/./src/DrawArc.ts","webpack://wave/./src/App.ts","webpack://wave/./src/DrawAxis.ts","webpack://wave/./src/DrawGraph.ts","webpack://wave/./src/index.ts"],"names":["canvas","document","createElement","context","getContext","body","appendChild","sampleData","processData","forEach","push","mouse","xPos","yPos","graphSpecs","stageWidth","clientWidth","stageHeight","clientHeight","baseX","baseY","axisGap","bar_width","bar_cnt","length","resize","width","height","scale","translate","window","addEventListener","animate","targetData","newData","data","index","clearRect","beginPath","moveTo","lineTo","stroke","i","fillStyle","font","fillText","closePath","DrawAxis","arc","Math","PI","fill","DrawArc","distance","xPosition","fillRect","DrawGraph","requestAnimationFrame","e","clientX","clientY","onload","App"],"mappings":"yBAeA,MC8FA,EA1FA,WACI,IAAMA,EAASC,SAASC,cAAc,UAChCC,EAAUH,EAAOI,WAAW,MAClCH,SAASI,KAAKC,YAAYN,GAE1B,IAAMO,EAAa,CACf,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAI7CC,EAAwB,GAC5BD,EAAWE,SAAQ,WACfD,EAAYE,KAAK,MAGrB,IAAIC,EAAQ,CACRC,KAAM,EACNC,KAAM,GAGNC,EAA4B,CAC5BC,WAAYd,SAASI,KAAKW,YAC1BC,YAAahB,SAASI,KAAKa,aAC3BC,MAAO,EACPC,MAAO,EACPC,QAAS,GACTC,UAAW,GACXC,QAAShB,EAAWiB,QAkBlBC,EAAS,WACXX,EAAWC,WAAad,SAASI,KAAKW,YACtCF,EAAWG,YAAchB,SAASI,KAAKa,aACvCJ,EAAWK,MAAQL,EAAWO,QAC9BP,EAAWM,MAAQN,EAAWG,YAAcH,EAAWO,QAEvDrB,EAAO0B,MAAgC,EAAxBZ,EAAWC,WAC1Bf,EAAO2B,OAAkC,EAAzBb,EAAWG,YAC3Bd,WAASyB,MAAM,EAAG,GAClBzB,WAAS0B,UAAUf,EAAWK,MAAOL,EAAWM,QASpDU,OAAOC,iBAAiB,SAAUN,GAClCA,IAKgB,SAAVO,IAvCe,IAAiBC,EAC9BC,EAD8BD,EAyCM1B,EAxCpC2B,EAAoB,GAwCG1B,EAvCtBC,SAAQ,SAAC0B,EAAMC,GACbH,EAAWG,IAAUD,EACpBD,EAAQxB,KAAKyB,EAAO,IAEpBD,EAAQxB,KAAKyB,MAmCrB3B,EAhCO0B,EAkCJ/B,IACCA,EAAQkC,WAAWvB,EAAWK,OAAQL,EAAWM,MAAON,EAAWC,WAAYD,EAAWG,aC3FtG,SAAkBd,EAAlB,GAA2H,IAArEY,EAAqE,EAArEA,WAAYE,EAAyD,EAAzDA,YAAaI,EAA4C,EAA5CA,QAA4C,EAAnCC,UAAmC,EAAxBC,QAC/FpB,EAAQmC,YAGRnC,EAAQoC,OAAO,EAAG,GAClBpC,EAAQqC,OAAO,GAAI,GAAKvB,EAAcI,IACtClB,EAAQsC,SAGR,IAAI,IAAIC,EAAE,EAAGA,EAAG,EAAGA,IAEfvC,EAAQoC,OAAO,EAAG,GAClBpC,EAAQoC,OAAO,GAAI,GAAKtB,EAAcI,GAAS,IAAIqB,EAAE,IACrDvC,EAAQoC,QAAQ,GAAI,GAAKtB,EAAcI,GAAS,IAAIqB,EAAE,IACtDvC,EAAQqC,OAAO,GAAI,GAAKvB,EAAcI,GAAS,IAAIqB,EAAE,IACrDvC,EAAQsC,SAKRtC,EAAQwC,UAAY,QACpBxC,EAAQyC,KAAO,aACfzC,EAAQ0C,SAAR,UAAoBH,EAAE,IAAM,IAAK,GAAKzB,EAAcI,GAAS,IAAIqB,EAAE,GAAK,GAI5EvC,EAAQoC,OAAO,EAAG,GAClBpC,EAAQqC,OAAOzB,EAAaM,EAAS,GACrClB,EAAQsC,SAGRtC,EAAQ2C,YD6DAC,CAAS5C,EAASW,GD5F9B,SACIX,EADJ,GAGC,IADIS,EACJ,EADIA,KAAMC,EACV,EADUA,KAEPV,EAAQmC,YAERnC,EAAQwC,UAAY,oBACpBxC,EAAQ6C,IAAIpC,EAAMC,EAAM,EAAG,EAAa,EAAVoC,KAAKC,IAAQ,GAC3C/C,EAAQgD,OACRhD,EAAQsC,SACRtC,EAAQ2C,YCmFAM,CAAQjD,EAASQ,GE7F7B,SACIR,EADJ,EAGII,EAHJ,GAKC,IAHIQ,EAGJ,EAHIA,WAAYE,EAGhB,EAHgBA,YAAaI,EAG7B,EAH6BA,QAASC,EAGtC,EAHsCA,UAAWC,EAGjD,EAHiDA,QAE7CX,EACJ,EADIA,KAAMC,EACV,EADUA,KAGPV,EAAQmC,YAKR,IAAI,IAAII,EAAE,EAAGA,EAAGnB,EAASmB,IAAI,CACzB,IAAMW,GAAYtC,EAAcO,EAAUC,IAAaA,EAAU,GAC3D+B,GAAaD,EAAW/B,GAAaoB,EAAIW,EAAWhC,EAAQ,EAElElB,EAAQyC,KAAO,aACfzC,EAAQwC,UAAY,QACpBxC,EAAQ0C,SAAR,UAAoBH,GAAKY,EAAW,GAAI,IAExCnD,EAAQwC,UAAY,wBACjB/B,EAAO0C,GAAa1C,GAAQ0C,EAAUhC,GAClCT,EAAO,GAAKA,IAAS,EAAII,GAA+B,KAAhBV,EAAWmC,MACtDvC,EAAQwC,UAAY,yBAExBxC,EAAQoD,SAASD,EAAW,EAAGhC,GAAY,EAAIL,GAA+B,KAAhBV,EAAWmC,KAI7EvC,EAAQsC,SACRtC,EAAQgD,OACRhD,EAAQ2C,YF+DAU,CAAUrD,EAASW,EAAYN,EAAaG,IAGhD8C,sBAAsBzB,GAE1BA,GAEAhC,EAAO+B,iBAAiB,aAAa,SAAC2B,GAClC/C,EAAMC,KAAO8C,EAAEC,QAAU7C,EAAWK,MACpCR,EAAME,KAAO6C,EAAEE,QAAU9C,EAAWM,UGvG5CU,OAAO+B,OAAS,WACZC,M","file":"index.js","sourcesContent":["import { graphSpecType, mouseType } from \"./App\";\n\nfunction DrawArc(\n    context: CanvasRenderingContext2D, \n    {xPos, yPos}: mouseType\n){\n    context.beginPath();\n    // context.clearRect(0, 0, stageWidth, stageHeight);\n    context.fillStyle = 'rgb(0, 0, 0, 0.5)';\n    context.arc(xPos, yPos, 5, 0, Math.PI * 2, false);\n    context.fill();\n    context.stroke();\n    context.closePath();\n}\n\nexport default DrawArc;","import DrawArc from \"./DrawArc\";\nimport DrawAxis from \"./DrawAxis\";\nimport DrawGraph from \"./DrawGraph\";\n\nexport type graphSpecType = {\n    stageWidth: number; \n    stageHeight: number; \n    baseX: number;\n    baseY: number;\n    axisGap: number; \n    bar_width: number; \n    bar_cnt: number;\n}\n\nexport type mouseType = {\n    xPos: number;\n    yPos: number;\n}\n\nfunction App(){\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d');\n    document.body.appendChild(canvas);\n\n    const sampleData = [\n        100, 200, 300, 500, 800, 400, 200, 100, 200, 300\n    ]\n\n    \n    let processData: number[] = [];\n    sampleData.forEach(()=>{\n        processData.push(1);\n    })\n\n    let mouse = {\n        xPos: 0,\n        yPos: 0\n    }\n\n    let graphSpecs: graphSpecType = {\n        stageWidth: document.body.clientWidth,\n        stageHeight: document.body.clientHeight,\n        baseX: 0,\n        baseY: 0,\n        axisGap: 50,\n        bar_width: 30,\n        bar_cnt: sampleData.length\n    }\n\n    const increaseData = (data: number[], targetData: number[]) =>{\n        let newData: number[] = [];\n        data.forEach((data, index)=>{\n            if(targetData[index] >= data){\n                newData.push(data + 15);\n            }else{\n                newData.push(data);\n            }\n        });\n        return newData;\n    }\n    \n    \n\n\n    const resize = ()=>{\n        graphSpecs.stageWidth = document.body.clientWidth;\n        graphSpecs.stageHeight = document.body.clientHeight;\n        graphSpecs.baseX = graphSpecs.axisGap;\n        graphSpecs.baseY = graphSpecs.stageHeight - graphSpecs.axisGap;\n        \n        canvas.width = graphSpecs.stageWidth * 2;\n        canvas.height = graphSpecs.stageHeight * 2;\n        context?.scale(2, 2);\n        context?.translate(graphSpecs.baseX, graphSpecs.baseY); \n\n        // if(context){\n        //     DrawAxis(context, graphSpecs);\n        //     DrawArc(context,graphSpecs, mouse.xPos, mouse.yPos);\n        //     DrawGraph(context, graphSpecs, processData);\n            \n        // }\n    };\n    window.addEventListener('resize', resize);\n    resize();\n\n\n\n\n    const animate = () =>{\n\n        processData = increaseData(processData, sampleData);\n\n        if(context){\n            context.clearRect(-graphSpecs.baseX, -graphSpecs.baseY, graphSpecs.stageWidth, graphSpecs.stageHeight);\n            DrawAxis(context, graphSpecs);\n            DrawArc(context, mouse);\n            DrawGraph(context, graphSpecs, processData, mouse);\n        }\n        \n        requestAnimationFrame(animate);\n    }\n    animate();\n\n    canvas.addEventListener('mousemove', (e)=>{\n        mouse.xPos = e.clientX - graphSpecs.baseX;\n        mouse.yPos = e.clientY - graphSpecs.baseY;\n    })\n}\n\nexport default App;","import { graphSpecType } from \"./App\";\n\nfunction DrawAxis(context: CanvasRenderingContext2D, {stageWidth, stageHeight, axisGap, bar_width, bar_cnt}: graphSpecType){\n    context.beginPath();\n\n    // y축\n    context.moveTo(0, 0);\n    context.lineTo(0, -1 * (stageHeight - axisGap));\n    context.stroke();\n\n    // y축 눈금\n    for(let i=0; i< 9; i++){\n\n        context.moveTo(0, 0);\n        context.moveTo(0, -1 * (stageHeight - axisGap)/10*(i+1));\n        context.moveTo(-5, -1 * (stageHeight - axisGap)/10*(i+1));\n        context.lineTo(5, -1 * (stageHeight - axisGap)/10*(i+1));\n        context.stroke();\n\n        \n\n        // 텍스트\n        context.fillStyle = \"black\";\n        context.font = \"20px Arial\";\n        context.fillText(`${i+1}`, -30, -1 * (stageHeight - axisGap)/10*(i+1) + 5)\n    }\n\n    // x축\n    context.moveTo(0, 0);\n    context.lineTo(stageWidth - axisGap, 0);\n    context.stroke();\n\n\n    context.closePath();\n}   \n\nexport default DrawAxis;","import { graphSpecType, mouseType } from \"./App\";\n\nfunction DrawGraph(\n    context: CanvasRenderingContext2D, \n    {stageWidth, stageHeight, axisGap, bar_width, bar_cnt}: graphSpecType,\n    sampleData: number[],\n    {xPos, yPos}: mouseType\n){\n           \n    context.beginPath();\n\n    // context.arc(0, 0, 50, 0, Math.PI * 2, false);\n    \n    \n    for(let i=0; i< bar_cnt; i++){\n        const distance = (stageWidth - (bar_width*bar_cnt)) / (bar_cnt + 1); // 막대 간 간격\n        const xPosition = (distance + bar_width) * i + distance - axisGap/2; //\n\n        context.font = \"20px Arial\";\n        context.fillStyle = \"black\";\n        context.fillText(`${i}`, xPosition+ 10, 30);\n\n        context.fillStyle = 'rgb(0, 199, 235, 0.4)';\n        if(xPos > xPosition && xPos <= xPosition+bar_width){\n            if(yPos < 0 && yPos >= -1 * stageHeight * (sampleData[i] * 0.001))\n            context.fillStyle = 'rgb(244, 67, 54, 0.4)';\n        } \n        context.fillRect(xPosition, 0, bar_width, -1 * stageHeight * (sampleData[i] * 0.001));\n    }\n\n    \n    context.stroke();\n    context.fill();\n    context.closePath();\n}\n\nexport default DrawGraph;","import App from './App';\n\nwindow.onload = () =>{\n    App();\n}\n"],"sourceRoot":""}